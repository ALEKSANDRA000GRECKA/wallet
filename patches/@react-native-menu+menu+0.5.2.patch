diff --git a/node_modules/@react-native-menu/menu/ios/MenuView.swift b/node_modules/@react-native-menu/menu/ios/MenuView.swift
index 4400f47..8e1fbc6 100644
--- a/node_modules/@react-native-menu/menu/ios/MenuView.swift
+++ b/node_modules/@react-native-menu/menu/ios/MenuView.swift
@@ -6,6 +6,7 @@
 //
 
 import UIKit
+import os
 @available(iOS 14.0, *)
 @objc(MenuView)
 class MenuView: UIButton {
@@ -34,6 +35,16 @@ class MenuView: UIButton {
             self.setup()
         }
     }
+    private var _previewText: String = "";
+    @objc var previewText: NSString? {
+        didSet {
+            guard let previewText = self.previewText else {
+                return
+            }
+            self._previewText = previewText as String
+            self.setup()
+        }
+    }
     @objc var onPressAction: RCTDirectEventBlock?
     
     @objc var shouldOpenOnLongPress: Bool = false {
@@ -42,6 +53,12 @@ class MenuView: UIButton {
         }
     }
 
+    @objc var blurBackground: Bool = false {
+        didSet {
+            self.setup()
+        }
+    }
+
     override init(frame: CGRect) {
       super.init(frame: frame)
       self.setup()
@@ -49,9 +66,20 @@ class MenuView: UIButton {
 
     
     func setup () {
-        let menu = UIMenu(title:_title, identifier: nil, options: .displayInline, children: self._actions)
 
-        self.menu = menu
+        if (blurBackground) {
+            let interaction = UIContextMenuInteraction(delegate: self)
+            self.addInteraction(interaction)
+            self.menu = nil
+            let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "network")
+            logger.log("[MenuView]: blurBackground")
+        } else {
+            let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "network")
+            logger.log("[MenuView]: menu")
+            let menu = UIMenu(title:_title, identifier: nil, options: .displayInline, children: self._actions)
+            self.menu = menu
+        }
+        
         self.showsMenuAsPrimaryAction = !shouldOpenOnLongPress
     }
     
@@ -70,3 +98,56 @@ class MenuView: UIButton {
         }
     }
 }
+
+@available(iOS 13.0, *)
+private class PreviewViewViewController: UIViewController {
+    private let label = UILabel()
+    private lazy var stackView = UIStackView(arrangedSubviews: [label])
+    
+    init(previewText: String) {
+        super.init(nibName: nil, bundle: nil)
+        view.backgroundColor = .secondarySystemBackground
+
+        label.text = previewText
+        label.lineBreakMode = .byTruncatingMiddle
+        label.textColor = .darkText
+        label.font = UIFont.systemFont(ofSize: 16, weight: .bold)
+        label.numberOfLines = 1
+
+        stackView.axis = .vertical
+        stackView.alignment = .center
+        stackView.layoutMargins = .init(top: 10, left: 13, bottom: 10, right: 13)
+        stackView.isLayoutMarginsRelativeArrangement = true
+        stackView.translatesAutoresizingMaskIntoConstraints = false
+        
+        view.addSubview(stackView)
+        
+        let width = view.bounds.width
+
+        NSLayoutConstraint.activate([
+            stackView.heightAnchor.constraint(equalToConstant: 42),
+            label.widthAnchor.constraint(equalToConstant: width - 26),
+            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
+            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor),
+        ])
+        
+        preferredContentSize = CGSize(width: width, height: 42)
+
+//        preferredContentSize = stackView.systemLayoutSizeFitting(UIView.layoutFittingCompressedSize)
+    }
+
+    required init?(coder: NSCoder) {
+        fatalError("init(coder:) has not been implemented")
+    }
+}
+
+@available(iOS 14.0, *)
+extension MenuView: UIContextMenuInteractionDelegate {
+    override func contextMenuInteraction(_ interaction: UIContextMenuInteraction, configurationForMenuAtLocation location: CGPoint) -> UIContextMenuConfiguration? {
+        return UIContextMenuConfiguration(identifier: nil, previewProvider: {
+            return PreviewViewViewController(previewText: self._previewText)
+        }) { suggestedActions in
+            return UIMenu(title:self._title, identifier: nil, options: .displayInline, children: self._actions)
+        }
+    }
+}
diff --git a/node_modules/@react-native-menu/menu/ios/RCTUIMenuManager.m b/node_modules/@react-native-menu/menu/ios/RCTUIMenuManager.m
index 45543d8..dda8e00 100644
--- a/node_modules/@react-native-menu/menu/ios/RCTUIMenuManager.m
+++ b/node_modules/@react-native-menu/menu/ios/RCTUIMenuManager.m
@@ -19,5 +19,13 @@ @interface RCT_EXTERN_MODULE(RCTUIMenu, RCTViewManager)
  * shouldOpenOnLongPress: determines whether menu should be opened after long press or normal press
  */
 RCT_EXPORT_VIEW_PROPERTY(shouldOpenOnLongPress, BOOL)
+/**
+ * blurBackground: determines whether menu should be opened as UIContextMenuInteraction
+ */
+RCT_EXPORT_VIEW_PROPERTY(blurBackground, BOOL)
+/**
+ * previewText: preview text
+ */
+RCT_EXPORT_VIEW_PROPERTY(previewText, NSString);
 
 @end
diff --git a/node_modules/@react-native-menu/menu/lib/typescript/src/types.d.ts b/node_modules/@react-native-menu/menu/lib/typescript/src/types.d.ts
index a52a947..85e5c32 100644
--- a/node_modules/@react-native-menu/menu/lib/typescript/src/types.d.ts
+++ b/node_modules/@react-native-menu/menu/lib/typescript/src/types.d.ts
@@ -109,6 +109,16 @@ export declare type MenuComponentProps = {
      * @default false
      */
     shouldOpenOnLongPress?: boolean;
+    /**
+     * Determines if menu should as Context Menu
+     *
+     * @default false
+     */
+    blurBackground?: boolean;
+    /**
+     * Preview text.
+     */
+    previewText?: string;
 };
 export declare type ProcessedMenuAction = Omit<MenuAction, 'imageColor' | 'titleColor' | 'subactions'> & {
     imageColor: ReturnType<typeof processColor>;
@@ -120,5 +130,7 @@ export declare type NativeMenuComponentProps = {
     onPressAction?: ({ nativeEvent }: NativeActionEvent) => void;
     actions: ProcessedMenuAction[];
     title?: string;
+    previewText?: string;
+    blurBackground?: boolean;
 };
-export {};
+export { };
diff --git a/node_modules/@react-native-menu/menu/src/types.ts b/node_modules/@react-native-menu/menu/src/types.ts
index 7e7206a..853f6b4 100644
--- a/node_modules/@react-native-menu/menu/src/types.ts
+++ b/node_modules/@react-native-menu/menu/src/types.ts
@@ -119,6 +119,16 @@ export type MenuComponentProps = {
    * @default false
    */
   shouldOpenOnLongPress?: boolean;
+  /**
+   * Determines if menu should as Context Menu
+   *
+   * @default false
+   */
+  blurBackground?: boolean;
+  /**
+     * Preview text.
+     */
+  previewText?: string;
 };
 
 export type ProcessedMenuAction = Omit<
@@ -135,4 +145,6 @@ export type NativeMenuComponentProps = {
   onPressAction?: ({ nativeEvent }: NativeActionEvent) => void;
   actions: ProcessedMenuAction[];
   title?: string;
+  previewText?: string;
+  blurBackground?: boolean;
 };
